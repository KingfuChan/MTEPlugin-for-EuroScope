// MetricAlt.h

#pragma once

#include "pch.h"

namespace MetricAlt {
	typedef struct _alt {
		int alt;
		std::string m;
		std::string f;
		std::string ma;
		std::string fa;
	} AltitudeEntry;
	typedef struct _menu {
		int altitude;
		std::string entry;
	} AltitudeMenuEntry;
	const int ALT_MAP_METER = 1;
	const int ALT_MAP_FEET = 2;
	const int ALT_MAP_ALTN_METER = 3;
	const int ALT_MAP_ALTN_FEET = 4;
	const int ALT_MAP_NOT_FOUND = -1;

	// default conversions
	const std::map<int, int> m_mtof = { // meter to feet map
	{  300, 1000},
	{  600, 2000},
	{  900, 3000},
	{ 1200, 3900},
	{ 1500, 4900},
	{ 1800, 5900},
	{ 2100, 6900},
	{ 2400, 7900},
	{ 2700, 8900},
	{ 3000, 9800},
	{ 3300,10800},
	{ 3600,11800},
	{ 3900,12800},
	{ 4200,13800},
	{ 4500,14800},
	{ 4800,15700},
	{ 5100,16700},
	{ 5400,17700},
	{ 5700,18700},
	{ 6000,19700},
	{ 6300,20700},
	{ 6600,21700},
	{ 6900,22600},
	{ 7200,23600},
	{ 7500,24600},
	{ 7800,25600},
	{ 8100,26600},
	{ 8400,27600},
	{ 8900,29100},
	{ 9200,30100},
	{ 9500,31100},
	{ 9800,32100},
	{10100,33100},
	{10400,34100},
	{10700,35100},
	{11000,36100},
	{11300,37100},
	{11600,38100},
	{11900,39100},
	{12200,40100},
	{12500,41100},
	{13100,43000},
	{13700,44900},
	{14300,46900},
	{14900,48900},
	{15500,50900},
	};
	const std::map<int, int> m_ftom = {  // feet to meter map
	{ 1000,  300},
	{ 2000,  600},
	{ 3000,  900},
	{ 3900, 1200},
	{ 4900, 1500},
	{ 5900, 1800},
	{ 6900, 2100},
	{ 7900, 2400},
	{ 8900, 2700},
	{ 9800, 3000},
	{10800, 3300},
	{11800, 3600},
	{12800, 3900},
	{13800, 4200},
	{14800, 4500},
	{15700, 4800},
	{16700, 5100},
	{17700, 5400},
	{18700, 5700},
	{19700, 6000},
	{20700, 6300},
	{21700, 6600},
	{22600, 6900},
	{23600, 7200},
	{24600, 7500},
	{25600, 7800},
	{26600, 8100},
	{27600, 8400},
	{29100, 8900},
	{30100, 9200},
	{31100, 9500},
	{32100, 9800},
	{33100,10100},
	{34100,10400},
	{35100,10700},
	{36100,11000},
	{37100,11300},
	{38100,11600},
	{39100,11900},
	{40100,12200},
	{41100,12500},
	{43000,13100},
	{44900,13700},
	{46900,14300},
	{48900,14900},
	{50900,15500},
	};

	const std::vector<AltitudeEntry> v_atos1 = { // altitude to std::string vector (fallback)
	{0,"-------","----","","",},
	{2,"VA     ","VA  ","","",},
	{1,"ILS    ","ILS ","","",},
	{3,"[     ]","[  ]","","",},
	{1000,"  3  10","F010","","1000",},
	{2000,"  6  20","F020","","2000",},
	{3000,"  9  30","F030","","3000",},
	{3900," 12  39","","","",},
	{4000,"","F040","","4000",},
	{4900," 15  49","","","",},
	{5000,"","F050","","5000",},
	{5900," 18  59","","","",},
	{6000,"","F060","","6000",},
	{6900," 21  69","","","",},
	{7000,"","F070","","7000",},
	{7900," 24  79","","","",},
	{8000,"","F080","","8000",},
	{8900," 27  89","","","",},
	{9000,"","F090","","9000",},
	{9800," 30  98","","","",},
	{10000,"","F100","","10000",},
	{10800," 33 108","","","",},
	{11000,"","F110","","11000",},
	{11800," 36 118","","","",},
	{12000,"","F120","","12000",},
	{12800," 39 128","","","",},
	{13000,"","F130","","13000",},
	{13800," 42 138","","","",},
	{14000,"","F140","","14000",},
	{14800," 45 148","","","",},
	{15000,"","F150","","15000",},
	{15700," 48 157","","","",},
	{16000,"","F160","","16000",},
	{16700," 51 167","","","",},
	{17000,"","F170","","17000",},
	{17700," 54 177","","","",},
	{18000,"","F180","","18000",},
	{18700," 57 187","","","",},
	{19000,"","F190","","19000",},
	{19700," 60 197","","","",},
	{20000,"","F200","","20000",},
	{20700," 63 207","","","",},
	{21000,"","F210","","21000",},
	{21700," 66 217","","","",},
	{22000,"","F220","","22000",},
	{22600," 69 226","","","",},
	{23000,"","F230","","23000",},
	{23600," 72 236","","","",},
	{24000,"","F240","","24000",},
	{24600," 75 246","","","",},
	{25000,"","F250","","25000",},
	{25600," 78 256","","","",},
	{26000,"","F260","","26000",},
	{26600," 81 266","","","",},
	{27000,"","F270","","27000",},
	{27600," 84 276","","","",},
	{28000,"","F280","","28000",},
	{29000,"","F290","","29000",},
	{29100," 89 291","","","",},
	{30000,"","F300","","30000",},
	{30100," 92 301","","","",},
	{31000,"","F310","","31000",},
	{31100," 95 311","","","",},
	{32000,"","F320","","32000",},
	{32100," 98 321","","","",},
	{33000,"","F330","","33000",},
	{33100,"101 331","","","",},
	{34000,"","F340","","34000",},
	{34100,"104 341","","","",},
	{35000,"","F350","","35000",},
	{35100,"107 351","","","",},
	{36000,"","F360","","36000",},
	{36100,"110 361","","","",},
	{37000,"","F370","","37000",},
	{37100,"113 371","","","",},
	{38000,"","F380","","38000",},
	{38100,"116 381","","","",},
	{39000,"","F390","","39000",},
	{39100,"119 391","","","",},
	{40000,"","F400","","40000",},
	{40100,"122 401","","","",},
	{41000,"","F410","","41000",},
	{41100,"125 411","","","",},
	{43000,"131 430","","","",},
	{43000,"","F430","","43000",},
	{44900,"137 449","","","",},
	{45000,"","F450","","45000",},
	{46900,"143 469","","","",},
	{47000,"","F470","","47000",},
	{48900,"149 489","","","",},
	{49000,"","F490","","49000",},
	{50900,"155 509","","","",},
	{51000,"","F510","","51000",},
	{60000,"","F600","","60000",},
	};

	int MtoFeet(const int meter);
	int FeettoM(const int feet);
	int LvlMtoFeet(const int meter);
	int LvlFeettoM(const int feet);
	bool RflFeettoM(const int feet, int& meter);
	std::string LvlFeetEvenOdd(const int feet); // for RouteChecker
	bool LoadAltitudeDefinition(const std::string filename);
	std::vector<AltitudeMenuEntry> GetMenuItems(const bool metric, const int trans_level);
	int GetAltitudeFromMenuItem(const std::string menuItem, const bool metric);
}